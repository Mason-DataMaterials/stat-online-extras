
library(survival)

#===> log-rank test <===#
data <- read.table("http://www.stat.ucla.edu/~david/surv/SA1-11.txt", F, sep=" ")
gp <- data[,1]
surv <- data[,2]
obs <- (data[,3] == 1)
survdiff(Surv(surv, obs) ~ gp, rho=0)

#===> basic cox ph <===#
data <- read.csv("http://www.stat.ucla.edu/~david/surv/SA1-10.csv", T)
attach(data)
my.surv <- Surv(surv, obs)
my.fit <- coxph(my.surv ~ Z1 + Z2)
my.fit$coefficients # may use my.fit$coeff instead
my.fit$var          # I^(-1), the covariance matrix of the estimates
my.fit$loglik       # log-likelihood for alt and null MLEs, resp.
my.fit$wald.test    # chi-square for Wald test
my.fit$score        # chi-square for score test
detach(data)

#===> extract a p-value from coxph <===#
#===> extract a p-value from coxph <===#
local.p.test <- function(coxph.fit, first, last, C=NA, d=NA, sign.digits=3){
  # checking H_0: C*beta.hat = c
  # coxph.fit is a coxph model
  # first is the first parameter estimate of interest in coxph.fit
  # last is the last parameter estimate of interest in coxph.fit
  # C is a q-by-p matrix
  # d is a q-by-1 matrix
	if(is.na(C)){
		n <- last-first+1
		C <- matrix(0, n, n)
		for(i in 1:n)
			C[i,i] <- 1
	} else {
		if(dim(C)[1] != last-first+1)
			stop("C has improper dimensions\n")
	}
	if(is.na(d)){
		n <- last-first+1
		d <- matrix(0, n, 1)
	}
	if(dim(d)[1] != dim(C)[1])
		stop("C and d do not have appropriate dimensions")
	I. <- coxph.fit$var[first:last,first:last]
	est <- matrix(as.vector(coxph.fit$coeff[first:last]), dim(C)[2])
	X <- as.numeric( t(C%*%est - d) %*%
		solve( t(C) %*% I. %*% C )  %*%
		(C%*%est - d) )
	signif(1-pchisq(X, dim(C)[1]), sign.digits)
}

data(burn)
attach(burn)
my.surv <- Surv(T3, D3)
my.fit <- coxph(my.surv ~ Z1 + as.factor(Z11), method='breslow')
my.fit
local.p.test(my.fit, 2, 4)



